#!@PERL@
# @configure_input@
# @file vcard2text
# @brief Extract text from a vCard file
#
# Copyright (C) 2016,2017 Olly Betts
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

use strict;
eval {
    require Text::vCard::Addressbook;
    require Text::vCard;
};
if ($@) {
    print STDERR $@;
    # Exit with code 127 which omindex interprets as "filter not installed"
    # and won't try further .msg files.
    exit 127;
}

if (@ARGV > 0) {
    foreach my $file (@ARGV) {
	dump_vcf($file);
    }
} else {
    dump_vcf('/dev/stdin');
}

sub dump_vcf {
    my $file = $_[0];
    my $address_book = Text::vCard::Addressbook->new({
	    'source_file' => $file
	});
    foreach my $vcard ($address_book->vcards()) {
	dump_vcard($vcard);
    }
}

my $sep;

sub dump_vcard {
    my $vcard = shift;
    print $sep if defined $sep;
    $sep = '\f';
    # Simple fields
    foreach my $field (qw(
	FN BDAY MAILER TZ TITLE ROLE NOTE PRODID REV SORT-STRING UID URL CLASS
	EMAIL TEL NICKNAME)) {
	# Ignore PHOTO for now.
	# LABEL is in the sample in the EDRM set, but isn't handled properly
	# by the perl module.
	foreach my $node ($vcard->get($field)) {
	    defined $node or next;
	    print $field;
	    my @types = grep {defined $_} $node->types();
	    if (@types > 0) {
		print "(", join(", ", @types), ")";
	    }
	    print ": ", $node->value(), "\n";
	}
    }
    # Non-simple fields
    foreach my $field (qw(ADR N GEO ORG)) {
	foreach my $node ($vcard->get($field)) {
	    defined $node or next;
	    foreach my $method (@{ $Text::vCard::lookup{$field} }) {
		my $res = $node->$method();
		next unless defined $res;
		if (ref($res) eq 'ARRAY') {
		    my @a = grep {$_ ne ''} @$res;
		    print "$field.$method: ", join("; ", @a) unless @a == 0;
		} else {
		    print "$field.$method: ", $res, "\n" unless $res eq '';
		}
	    }
	}
    }
}
