#! /usr/bin/perl -w
# Copyright (c) 2007-2018 Olly Betts
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

require 5.000;
use strict;
use POSIX;

if (defined $ARGV[0] && $ARGV[0] eq '--help') {
    print <<END;
Syntax: $0 [PATCH]...

Nit-pick Xapian patches.

A patch can be supplied on stdin, or one or more patch files listed on the
command line.

Produces output suitable for use with vim's quick-fix mode, and similar
features in other editors.

Example usage:

git diff master.. | xapian-check-patch > tmp.qf
vim -q tmp.qf
END
    exit 0;
}

my ($fnm, $lineno);
my %count;

sub diagnostic {
    my ($type, $msg, $fullline) = @_;
    print "$fnm:$lineno: $type: $msg";
    if (defined $fullline) {
	print ": $fullline";
    } else {
	print "\n";
    }
    ++$count{$type};
}

my $add_lines = 0;
my $del_lines = 0;
my $files = 0;
# SVN property changes don't have an "Index: [...]" line.
my $want_tabs = -1;
my $check_trailing = 0;
my $check_space_tab = 0;
my $in_comment = 0;
my $lang;
my $header_guard_macro;
my $last_first_char = '';
my $in_ternary;
my $preproc;
my $preproc_continuation;
while (<>) {
    if (/^Index: (.+)/ || m!^diff --git a/.+ b/(.+)!) {
	++$files;
	$fnm = $1;
	$lineno = 1;
	$lang = undef;
	$in_comment = 0;
	$header_guard_macro = undef;
	$in_ternary = 0;
	$preproc = 0;
	$preproc_continuation = 0;
	# Don't know!
	$want_tabs = -1;
	if ($fnm =~ /\.cc$/) {
	    if ($fnm !~ m!\b(?:cdb|portability/)! &&
		$fnm !~ m!\bcommon/getopt\.cc$! &&
		$fnm !~ m!\bomega/md5\.cc$! &&
		$fnm !~ m!\bcommon/msvc_dirent\.cc$!) {
		$lang = 'c++';
		$want_tabs = 1 unless ($fnm =~ m!\blanguages/steminternal\.cc$!);
	    }
	} elsif ($fnm =~ /\.c$/) {
	    if ($fnm !~ m!\blanguages/compiler/! &&
		$fnm !~ m!/lemon\.c$! &&
		$fnm !~ m!/xapdep\.c$!) {
		$lang = 'c';
		$want_tabs = 1;
	    }
	} elsif ($fnm =~ /\.h$/) {
	    if ($fnm !~ m!\binclude/xapian/intrusive_ptr\.h! &&
		$fnm !~ m!\blanguages/compiler/! &&
		$fnm !~ m!\bcommon/msvc_dirent\.h$! &&
		$fnm !~ m!\bcommon/heap\.h$!) {
		$lang = 'h';
		$want_tabs = 1 unless ($fnm =~ m!/omega/cdb!);
	    }
	} elsif ($fnm =~ /\.py(?:\.in)?$/) {
	    $lang = 'py';
	    $want_tabs = 0;
	} elsif ($fnm =~ m!(?:^|/)ChangeLog\b!) {
	    $lang = 'changelog';
	    $want_tabs = 1;
	}
	$check_trailing =
	    $fnm !~ /\.sbl$/ &&
	    $fnm !~ m!\bcommon/msvc_dirent\.! &&
	    $fnm !~ m!/lemon\.c$! &&
	    $fnm !~ m!/queryparser\.lt$! &&
	    $fnm !~ m!\bcdb! &&
	    $fnm !~ m!/testdata/etext\.txt$!;
	$check_space_tab =
	    $fnm !~ /\.patch$/ &&
	    $fnm !~ /\.sbl$/;
	# print STDERR "$fnm: lang=" . ($lang // "UNKNOWN") . "\;
	next;
    }
    my $pre3 = substr($_, 0, 3);
    if ($pre3 eq '@@ ') {
	/^\@\@ -\d+,\d+ \+(\d+),\d+\b/ and $lineno = $1;
	$in_comment = 0;
	next;
    }
    if ($pre3 eq '---' || $pre3 eq '+++') {
	next;
    }
    my $fullline = $_;
    if (defined $lang && ($lang eq 'c++' || $lang eq 'h' || $lang eq 'c')) {
	# Uncomment commented out parameter names: foo(int /*bar*/) -> foo(int bar)
	s!/\*([A-Za-z_][A-Za-z_0-9]*)\*/([,)])!$1$2!g;

	# Check for comments without a space before the comment text.
	if (m!^\+.*\s/[*/]{1,2}[A-Za-z0-9]!) {
	    diagnostic('error', "Missing space between comment characters and comment text", $fullline);
	}

	# Trim comments:
	if (s!/(?:\*.*?\*/|/.*)!!g) {
	    s/\s+$//;
	}
	if (s!/\*.*!!g) {
	    s/\s+$//;
	    $in_comment = 1;
	}
	# Trim content of comments ending on this line:
	if (s!^(.).*\*/!$1*/!) {
	    $in_comment = 0;
	}
	if ($in_comment) {
	    $_ = '';
	} else {
	    # Drop comment content for "*" continuation lines (when /* isn't in hunk):
	    s/^(.)(\s*\*).*/$1$2/;
	}
    } elsif (defined $lang && $lang eq 'py') {
	# Trim comments:
	if (s!#.*!!g) {
	    s/\s+$//;
	}
    }

    # Replace multiple spaces before line continuation marker:
    s!  +\\$! \\!;

    if (defined $lang && ($lang eq 'c++' || $lang eq 'h' || $lang eq 'c')) {
	if (substr($_, 0, 1) eq '+') {
	    my $expandedline = '';
	    for my $i (1..length($fullline) - 1) {
		my $ch = substr($fullline, $i, 1);
		if ($ch eq "\t") {
		    $expandedline .= ('.' x (8 - length($expandedline) % 8));
		} else {
		    $expandedline .= $ch;
		}
	    }
	    chomp($expandedline);
	    if (length($expandedline) > 80 &&
		# Logging annotations aren't really for human eyes.
		!/^\+[ \t]*LOGCALL/ &&
		# Don't force wrapping of a long #error message.
		!/^#\d*(error|warning)\b/) {
		diagnostic('error', "Line extends beyond column 80 (to column ".length($expandedline).")", $fullline);
	    }
	}
	if (m,^\+\s+LOGCALL(?:_[A-Z0-9]+)*\([^"]*"[^"]*(?<!operator)\(,) {
	    diagnostic('error', "Don't include parentheses in debug logging method/class name", $fullline);
	}
	# Replace string literals containing escaped quotes:
	if (/['"]/) {
	    my $quote = substr($_, $-[0], 1);
	    my $start = $+[0];
	    my $i = $start;
	    my $esc = 0;
QUOTELOOP:  while (1) {
		if ($i >= length($_)) {
		    $_ = substr($_, 0, $start) . "X\n";
		    last;
		}
		my $c = substr($_, $i, 1);
		if ($c eq $quote) {
		    $_ = substr($_, 0, $start) . "X" . substr($_, $i);
		    $i = $start + 2;
		    # See if there's another string after this one:
		    while ($i != length($_)) {
			$c = substr($_, $i, 1);
			++$i;
			if ($c eq '"' || $c eq "'") {
			    $quote = $c;
			    $start = $i;
			    $esc = 0;
			    next QUOTELOOP;
			}
		    }
		    last;
		}
		if ($c eq '\\') {
		    ++$i;
		    $c = substr($_, $i, 1);
		    if ($c eq 'x') {
			++$i while (substr($_, $i, 1) =~ /^[A-Fa-f0-9]$/);
			next;
		    } elsif ($c =~ /^[0-7]/) {
			my $j = $i;
			++$i while ($i - $j <= 3 && substr($_, $i, 1) =~ /^[0-7]$/);
			next;
		    } elsif ($c eq '"' || $c eq "'") {
			++$esc;
		    }
		}
		++$i;
	    }
	}
    }

    if ($check_trailing && $fullline =~ /^\+.*[ \t]$/) {
	diagnostic('error', "added/changed line has trailing whitespace", $fullline);
    }
    if ($check_space_tab && /^\+.* \t/) {
	diagnostic('error', "added/changed line has space before tab", $fullline);
    }
    if ($want_tabs == 1 and /^\+\t* {8}/) {
	diagnostic('error', "added/changed line uses spaces for indentation rather than tab", $fullline);
    }
    if (!$want_tabs and /^\+ *\t/) {
	diagnostic('error', "added/changed line uses tab for indentation rather than spaces", $fullline);
    }
    if ((!defined $lang || $lang ne 'changelog') && $fullline =~ /^([-+]).*\bFIX(?:ME)\b/) {
	# Break up the string in the regexp above and messages below to avoid
	# this triggering on its own code!
	if ($1 eq '-') {
	    # Not an error, but interesting information.
	    diagnostic('info', "FIX"."ME removed", $fullline);
	} else {
	    # Not an error, but not good.
	    diagnostic('warning', "FIX"."ME added", $fullline);
	}
    }
    if (defined $lang && $lang ne 'changelog' && /^\+.*\\([abcefp]|brief|code|deprecated|endcode|exception|file|internal|li|param|private|return|todo)\b/) {
	diagnostic('error', "Doxygen command '\\$1' introduced by '\\' not '\@'", $fullline);
    }
    if (defined $lang && $lang ne 'changelog' && /^\+.*@\s+([abcefp]|brief|code|deprecated|endcode|exception|file|internal|li|param|private|return|todo)\b/) {
	diagnostic('error', "Broken Doxygen command: whitespace between '\@' and '$1'", $fullline);
    }
    if (defined $lang && ($lang eq 'c++' || $lang eq 'h' || $lang eq 'c')) {
	if (/^([-+ ])(\s*)\#/) {
	    # Avoid misfiring for something like:
	    # #define FOO(x) \
	    #     #x
	    if (!$preproc_continuation) {
		if ($1 eq '+' && $2 ne '') {
		    diagnostic('error', "Whitespace before '#' on preprocessor line", $fullline);
		}
	    }
	    $preproc = 1;
	    $preproc_continuation = /\\$/;
	} elsif ($preproc_continuation) {
	    $preproc_continuation = /\\$/;
	} else {
	    $preproc = 0;
	}
	if ($check_space_tab && /^\+( (?:|  |    |      ))[^ \t#].*(?:[^)];|[^);,])\n/) {
	    # Exclude lines ending ');', ')', or ',' to avoid reporting for wrapped function arguments.
	    diagnostic('error', "line indented by ".length($1)." spaces", $fullline);
	}
	if (m!^\+.*\b([A-Za-z_][A-Za-z_0-9]*)\s+\(! &&
	    $1 !~ /^(bool|case|catch|double|for|if|int|return|switch|throw|void|while)$/) {
	    if (!$preproc) {
		diagnostic('error', "Whitespace between '$1' and '('", $fullline);
	    } else {
		# FIXME: We skip preprocessor lines for now to avoid triggering
		# on things like «#define FOUR (2+2)» but it would be good to
		# catch «#define FOO(x) foo (x)»
	    }
	}
	if (m!^\+\s*(case|catch|class|do|for|if|namespace|struct|switch|try|union)\b([^ ]| \s)!) {
	    diagnostic('error', "'$1' not followed by exactly one space", $fullline);
	}
	if (m!^\+.*;[^\s\\]!) {
	    diagnostic('error', "Missing space after ';'", $fullline);
	}
	if (m!^\+.*[^(;]\s;!) {
	    # Stuff like this is OK: for ( ; ; ) {
	    # though for that exact case I'd suggest: while (true) {
	    diagnostic('error', "Whitespace before ';'", $fullline);
	}
	if (m!^\+.*?\b(return)\b([^ ;]| \s)!) {
	    diagnostic('error', "'$1' not followed by exactly one space", $fullline);
	}
	if (m!^\+.*?\b(else)\b([^ \n]| \s)!) {
	    diagnostic('error', "'$1' not followed by exactly one space", $fullline);
	}
	if (m!^\+.*?\b(while)\b([^ ]| \s)!) {
	    diagnostic('error', "'$1' not followed by exactly one space", $fullline);
	}
	if (m!^\+.*?(?:}|}\s{2,}|}\t|^[^}]*)\b(catch)\b!) {
	    diagnostic('error', "'$1' not preceded by exactly '} '", $fullline);
	}
	if (m!^\+.*?(?:}|}\s{2,}|}\t)\b(else|while)\b!) {
	    diagnostic('error', "'}' and '$1' not separated by exactly one space", $fullline);
	}
	if (m!^\+.*\((?: [^;]|\t)!) {
	    # Allow: for ( ; i != 10; ++i)
	    diagnostic('error', "Whitespace after '('", $fullline);
	}
	if (m!^\+.*\H.*\h\)!) {
	    diagnostic('error', "Whitespace before ')'", $fullline);
	}
	if (m!^\+.*;\s*(\w+)([-+]{2})\)!) {
	    diagnostic('error', "Prefer '$2$1' to '$1$2'", $fullline);
	}
	if (m,^\+\s*[^#].*[\w)](?!-[->]|\+\+)((?:\&\&|\|\||<<|>>|[-+/*%~=<>!&|^])=?|[?]),) {
	    my @pre = @-;
	    my @post = @+;
	    my $op = $1;
	    if (substr($_, $pre[1] - 8, 8) eq 'operator') {
		# operator*() etc
	    } elsif ($op eq '>' && substr($_, 0, $pre[1]) =~ /[A-Za-z0-9_]</) {
		# y = static_cast<char>(x);
	    } elsif ($op eq '>') {
	    } elsif ($op eq '<' && substr($_, $pre[1] - 1, 1) =~ /^[A-Za-z0-9_]$/ && substr($_, $post[1]) =~ />/) {
		# y = static_cast<char>(x);
	    } elsif ($op eq '<' &&
		     substr($_, 0, $pre[1]) =~ /\b(?:enable_if|list|map|multimap|multiset|priority_queue|set|template|unordered_map|unordered_set|vector)$/) {
		# y = priority_queue<Foo*,
		#                    Bar>;
		# template<typename A,
		#          typename B>
	    } elsif ($op eq '&&' && substr($_, 0, $pre[1]) =~ /\b(?:auto|bool|double|float|int(?:\d+_t)?|long|string|uint\d+_t|unsigned|[A-Z][A-Za-z0-9_]*)$/) {
		# auto&& x;
		# method(Class&& foo);
	    } elsif (($op eq '<<' || $op eq '>>') &&
		substr($_, 0, $pre[1]) =~ /\b(?:0x[0-9a-fA-F]+|[0-9]+)$/ &&
		substr($_, $post[1]) =~ /^(?:0x[0-9a-fA-F]+|[0-9]+)\b/) {
		# 0x00b1<<26
	    } elsif (($op eq '-' || $op eq '+') &&
		substr($_, 0, $pre[1]) =~ /[0-9]\.?e$/) {
		# 1.2e-3, 7.e+3
	    } elsif ($op eq '>>' &&
		/[A-Za-z0-9_]<.+</) {
		# vector<vector<int>> v;
	    } elsif ($op =~ /^[*&|]$/) {
		# FIXME: *: const char* x;
		# FIXME: &: const char& x;
		# FIXME: |: FOO|BAR
	    } else {
		diagnostic('error', "Missing space before '$op'", $fullline);
	    }
	}
	if (m@^\+\s*[^#\s].*?((?:\&\&|\|\||<<|>>|[-+/*%~=<>!&|^])=?|[?:,])(?<!(?:-[->]|\+\+|::))(?:[\w\(\.\{!"']| \s)@) {
	    my @pre = @-;
	    my @post = @+;
	    my $op = $1;
	    if ($op eq '~' && substr($_, $post[1]) =~ /^[A-Za-z][A-Za-z0-9_]*\(/) {
		# Destructor - e.g. ~Foo();
	    } elsif (($op eq '-' || $op eq '+' || $op eq '!' || $op eq '~') &&
		substr($_, 0, $pre[1]) =~ m@(?:[-+/*%~=<>&|,;?:] |[\[(]|\b(?:return|case) |^\+\s*)$@) {
		# Unary -, +, !, ~: e.g. foo = +1; bar = x * (-y); baz = a * -b;
	    } elsif ($op eq ',' && (
		/\b(?:AssertRel(?:Paranoid)?|TEST_REL)\(/ ||
		/{[^()]*}/)) {
		# AssertRel(a,<,b);
	    } elsif ($op eq '>>' &&
		/[A-Za-z0-9_]<.+</) {
		# vector<vector<int>>&
	    } elsif ($op =~ /^[*&<>|]$/) {
		# FIXME: *: const char *x;
		# FIXME: *: const char &x;
		# FIXME: < >: y = static_cast<char>(x);
		# FIXME: |: FOO|BAR
	    } elsif (substr($_, $pre[1] - 8, 8) eq 'operator') {
		# operator==() etc
	    } elsif (($op eq '<<' || $op eq '>>') &&
		substr($_, 0, $pre[1]) =~ /\b(?:0x[0-9a-fA-F]+|[0-9]+)$/ &&
		substr($_, $post[1]) =~ /^(?:0x[0-9a-fA-F]+|[0-9]+)\b/) {
		# 0x00b1<<26
	    } elsif (($op eq '-' || $op eq '+') &&
		substr($_, 0, $pre[1]) =~ /[0-9]\.?e$/) {
		# 1.2e-3, 7.e+3
	    } else {
		diagnostic('error', "Should have exactly one space after '$op'", $fullline);
	    }
	}
	if (/^\+.*;;\s*$/) {
	    diagnostic('error', "Extra ';' at end of line", $fullline);
	}
	if (m@^\+[^#]*?[^#\h] +(,|->)@) {
	    diagnostic('error', "Space before '$1'", $fullline);
	}
	if (m,^\+[^#]*?[^#\h]  ,) {
	    diagnostic('error', "Multiple spaces", $fullline);
	}
	if (m!^\+(?:.*[;{])?\s*/[/*]{1,2}\w!) {
	    diagnostic('error', "added/changed line has comment without whitespace before the text", $fullline);
	}
	if (m!^\+.*?\)\{!) {
	    diagnostic('error', "No space between ')' and '{'", $fullline);
	}
	if ($fnm !~ m!/(?:md5|posixy_wrapper|perftest)\.cc$! &&
	    m,^\+.*[^\w\.>]([a-z][a-z0-9]*[A-Z]\w*),) {
	    my $symbol = $1;
	    if ($symbol eq 'gzFile' || $symbol eq 'uInt' || $symbol =~ /^(?:de|in)flate[A-Z]/) {
		# Whitelist symbols from APIs we use.
	    } elsif ($symbol =~ /^[gs]et[A-Z]$/) {
		# For now, allow setD(), etc.
	    } elsif ($symbol =~ /^h(?:File|Read|Write|Pipe|Client)$/ || $symbol eq 'fdwCtrlType' || $symbol eq 'pShutdownSocket') {
		# Platform specific names, allow for now.
	    } else {
		diagnostic('error', "camelCase identifier '$1' - Xapian coding convention is to use lower case and underscores for variables and functions, and CamelCase for class names", $fullline);
	    }
	}
	if ($lineno == 1 && m!^\+!) {
	    if (m!^/\*\* \@file (\S+)!) {
		my $at_file = $1;
		if (length $fnm == length $at_file ||
		    (length $fnm > length $at_file && substr($fnm, -length $at_file - 1, 1) eq '/') &&
		    substr($fnm, -length $at_file) eq $at_file) {
		    # @file matches
		} else {
		    diagnostic('error', "\@file doesn't match filename", $fullline);
		}
	    } else {
		diagnostic('error', "\@file missing", $fullline);
	    }
	}
	if (/^\+.*\b(?:class|struct)\b.*:\s*$/) {
	    diagnostic('error', "Inheritance list split after ':', should be before", $fullline);
	}
	# Try to distinguish ternary operator (?:) correctly split after ":" vs
	# constructor initialiser list incorrectly split after ":".
	my $last_in_ternary = $in_ternary;
	$in_ternary = / \?(?: |$)/;
	if (!$last_in_ternary && !$in_ternary && /^\+.*\)\s*:\s*$/) {
	    diagnostic('error', "Constructor initialiser list split after ':', should be before", $fullline);
	}
	if (m,^\+\s+([-+/%^]|[&|]{2})\s,) {
	    diagnostic('error', "Expression split before operator '$1', should be after", $fullline);
	}
	if ($lang eq 'h') {
	    if (m!^\+\s*#\s*(ifndef|define|endif\s*/[*/])\s+((?:[A-Z]+_INCLUDED)?_?\w+_[Hh]\b)!) {
		my ($type, $guard) = ($1, $2);
		my $expected_guard;
		if (!defined $header_guard_macro) {
		    if ($type eq 'ifndef') {
			$header_guard_macro = [$type, $guard];
			my $expected_guard = uc $fnm;
			$expected_guard =~ s![-.]!_!g;
			my $cut;
			if (length($expected_guard) > length($guard) &&
			    substr($expected_guard, -length($guard) - 1, 1) eq '/' &&
			    substr($expected_guard, -length($guard)) eq $guard) {
			    $cut = -1;
			} else {
			    for my $i (1 .. length($guard)) {
				my $ch_e = substr($expected_guard, -$i, 1);
				my $ch_g = substr($guard, -$i, 1);
				next if ($ch_e eq $ch_g);
				last if ($ch_e ne '/' || $ch_g ne '_');
				$cut = $i;
			    }
			}
			if (!defined $cut) {
			    diagnostic('error', "include guard macro should match filename", $fullline);
			}
			my $prefix = 'XAPIAN_INCLUDED_';
			if ($fnm =~ m!.*omega/(?:.*/)?!) {
			    $prefix = 'OMEGA_INCLUDED_';
			}
			#} elsif ($fnm =~ s!.*xapian-core/.*/!!) {
			# $expected_guard = "XAPIAN_INCLUDED_" . $expected_guard;
			#} elsif ($fnm =~ s!.*xapian-letor/.*/!!) {
			#$expected_guard = "XAPIAN_INCLUDED_" . $expected_guard;
			if (defined $cut && $cut == -1) {
			    diagnostic('error', "include guard macro should use prefix '$prefix'", $fullline);
			} elsif (defined $cut && substr($guard, 0, length($guard) - $cut + 1) ne $prefix) {
			    diagnostic('error', "include guard macro should use prefix '$prefix'", $fullline);
			} elsif ($guard !~ /^\Q$prefix\E/) {
			    diagnostic('error', "include guard macro should use prefix '$prefix'", $fullline);
			}
		    }
		} else {
		    if (!($type eq 'define' && $header_guard_macro->[0] ne 'ifndef')) {
			my $expected_guard = $header_guard_macro->[1];
			$header_guard_macro->[0] = $type;
			if ($guard ne $expected_guard) {
			    diagnostic('error', "include guard macro should be $expected_guard", $fullline);
			}
		    }
		}
	    }
	} else {
	    if (m!^\+\s*#\s*define\s+[A-Z]\+_INCLUDED_!) {
		diagnostic('error', "include guard macro defined in non-header", $fullline);
	    }
	}
    } elsif (defined $lang && $lang eq 'py') {
	if (/^\+.*;\s*$/) {
	    diagnostic('error', "';' at end of line of python code", $fullline);
	}
    }
    if (defined $fnm && $fnm !~ m!xapian-check-patch|ChangeLog|NEWS|stemming/.*/(?:voc|output)\.txt$!) {
	if (/^\+.*?\b(xapain|the the|initialsing|ipv5|outputing)\b/i ||
	    # Cases which just need to be the prefix of a word
	    /^\+.*?\b((?:deafult|parm|peform|acessor|comptib|seach|seperat|seprat|separater|iteratat|calulat|delimitor|charactor)[a-z]*\b)/i ||
	    # Case-sensitive cases
	    /^\+.*?\b(and and)\b/) {
	    diagnostic('error', "Typo '$1'", $fullline);
	}
    }

    my $first_char = substr($fullline, 0, 1);
    if ($first_char eq ' ') {
	++$lineno;
    } elsif ($first_char eq '+') {
	++$lineno;
	++$add_lines;
    } elsif ($first_char eq '-') {
	++$del_lines;
    } elsif ($first_char eq '\\') {
	# "\ No newline at end of file" - if preceded by a "+" line, this means
	# that the patch leaves the file missing a newline at the end.
	if ($last_first_char eq '+') {
	    diagnostic('error', 'No newline at end of file');
	}
    }
    $last_first_char = $first_char;
}
if (scalar keys %count) {
    for (sort keys %count) {
	print STDERR "$_ count:\t$count{$_}\n";
    }
    print STDERR "\n";
}
print STDERR <<"__END__";
Files patched:\t$files
Lines added:\t$add_lines
Lines removed:\t$del_lines
__END__
exit(exists $count{'error'} ? 1 : 0);
