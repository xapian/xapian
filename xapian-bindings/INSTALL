Xapian-bindings Installation
============================

Originally based on automake's generic "Installation Instructions" which are:

Copyright (C) 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2004, 2005,
2006, 2007, 2008, 2009 Free Software Foundation, Inc.

   Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without warranty of any kind.

Known Issues
============

   * The bindings glue code generated by SWIG seems to require a lot of memory
     to compile and can take several minutes even on a fast machine (at least
     with most versions of g++).  Some systems (such as OpenBSD) may require
     you to increase the amount of memory a process can use (using ulimit is
     the simplest way).  Alternatively you can compile the bindings without
     optimisation using:

	 make CXXFLAGS=-g

     Xapian-bindings version 0.9.3 reduced the compile time by something like a
     factor of 3 and probably also reduced memory usage significantly, but you
     might still encounter this issue on slower machines with less memory.

Quick Installation Guide
========================

The simplest way to compile this package is:

  0. Make sure you have the required tools installed for the languages you
     want to build the bindings for.  Package systems often separate the
     files you need to build the bindings into a separate package with a
     `-dev` or `-devel` suffix.  Additional per-language dependencies are:

       * python:
         - Sphinx Documentation Generator: http://www.sphinx-doc.org/
	   The package you want might be python-sphinx.
       * python3:
         - Sphinx Documentation Generator: http://www.sphinx-doc.org/
	   The package you want might be python3-sphinx.

  1. 'cd' to the directory containing the package's source code and type
     './configure' to configure the package for your system.

     You need to make sure that xapian-config from xapian-core is on your path,
     or else pass its full path to xapian-bindings's configure script:

       ./configure XAPIAN_CONFIG=/path/to/xapian-config

     By default, configure will enable building of bindings for all languages
     which it can find the required tools for.  Alternatively you can specify
     exactly which bindings you want to build by passing one or more of the
     following options to configure:

       --with-csharp	    enable CSharp bindings
       --with-java	    enable Java bindings
       --with-lua	    enable Lua bindings
       --with-perl	    enable Perl bindings
       --with-php	    enable PHP 5 bindings
       --with-php7	    enable PHP 7 bindings
       --with-python	    enable Python 2 bindings
       --with-python3	    enable Python 3 bindings
       --with-ruby	    enable Ruby bindings
       --with-tcl	    enable Tcl bindings

     If you've requested particular bindings using these options, then
     configure will fail with an error if it is missing the prerequisite
     tools, libraries, header files, etc required to build bindings for
     any of the specified languages.

     If you have more than one version of a particular language installed
     you can tell configure which to build the bindings for by setting
     variables on the configure command line.  For a full list of such
     variables, see the output of 'configure --help' - for example, for
     Python you might use:

       ./configure PYTHON=/opt/bin/python2.6

     If you don't have root access and want to compile any of the bindings
     other than C#, Java and PHP, read the next section: "Installing without
     root access".

     Running 'configure' might take a while.  While running, it prints
     some messages telling which features it is checking for.

  2. Type 'make' to compile the package.

  3. Optionally, type 'make check' to run the self-tests that come with
     the package, using the just-built uninstalled binaries.

  4. Type 'make install' to install the programs and any data files and
     documentation.  When installing into a prefix owned by root, it is
     recommended that the package be configured and built as a regular
     user, and only the 'make install' phase executed with root
     privileges.

  5. You can remove the program binaries and object files from the
     source code directory by typing 'make clean'.  To also remove the
     files that 'configure' created (so you can compile the package for
     a different kind of computer), type 'make distclean'.  There is
     also a 'make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

  6. You can also type 'make uninstall' to remove the installed files
     again.

Installing without root access
==============================

     By default the bindings for all languages apart from Java and C# will
     automatically detect where the language interpreter expects extension
     modules to be installed and try to install there.  This is a problem
     if you want to install them and don't have root access.  In this case
     follow the instructions for the particular language below (note: you
     still build several at once - just pass the arguments listed below
     for each language to "./configure", to "make", and to "make install".)
     Note that you also need to pass a "--prefix" option to configure so that
     the documentation and examples can be installed.

  PHP (5 and 7):

     With current releases of PHP, there doesn't seem to be a good way to
     install the PHP bindings without root access such that they can be used
     from PHP run from a webserver, which is what most users want to do.

     If you're only interested in running code from the command line (via PHP's
     CLI SAPI) then the following will work:

     ./configure --with-php --prefix=$HOME/install PHP_EXTENSION_DIR=$HOME/my_php_extensions
     make
     make install

     Then tell the PHP interpreter to load extensions from there:

     php -d extension_dir="$HOME/my_php_extensions" myscript.php

     However, this will stop PHP from looking in the default place for
     extensions!  It doesn't seem to be possible to specify more than one
     directory, but you can copy or symlink system installed extensions
     from the default extension directory to $HOME/my_php_extensions like
     so:

     ln -s "`php -r 'print PHP_EXTENSION_DIR;'`"/* "$HOME/my_php_extensions"

     This will symlink all of them, but you only actually need those that
     get loaded.

  Python 2:

     ./configure --with-python --prefix=$HOME/install PYTHON_LIB=$HOME/.local
     make
     make install

     Python 2.6 and later will look in ~/.local for packages automatically
     so the above is all that is required.

     For older Python versions, or if you set PYTHON_LIB to a different
     directory, you'll need to tell Python to look for modules in that
     directory.  Here are two possible ways to do that:

     setenv PYTHONPATH=$HOME/.local python myscript.py

     Or you can add this to the start of your Python scripts:

     import os
     import sys
     sys.path.insert(0, os.environ['HOME'] + "/.local")
     import xapian

  Python 3:

     ./configure --with-python3 --prefix=$HOME/install PYTHON3_LIB=$HOME/.local
     make
     make install

     Python 3 looks in ~/.local for packages automatically, so you don't need
     to do anything special to use bindings installed there.

  Ruby:

     ./configure --with-ruby --prefix=$HOME/install RUBY_LIB=$HOME/my_ruby_modules RUBY_LIB_ARCH=$HOME/my_ruby_modules
     make
     make install

     And then you'll need to tell Ruby to look for modules in this directory:

     ruby -I$HOME/my_ruby_modules myscript.rb

  Tcl8:

     ./configure --with-tcl --prefix=$HOME/install TCL_LIB=$HOME/my_tcl_modules
     make
     make install

     And then add the following to the start of your script to load Xapian:

     load [file join "/home/USERNAME/my_tcl_modules" xapian.so]

  Perl:

     ./configure --with-perl --prefix=$HOME/install PERL_LIB=$HOME/my_perl_modules
     make
     make install

     And then you'll need to tell Perl to look for modules in this directory:

     perl -I$HOME/my_perl_modules myscript.pl

Compilers and Options
=====================

   Some systems may require unusual options for compilation or linking that
the 'configure' script does not know about.  Run './configure --help'
for details on some of the pertinent environment variables.

   You can give 'configure' initial values for configuration parameters
by setting variables in the command line or in the environment.  Here
is an example:

     ./configure LIBS=-lposix

   If your system requires special flags, do let us know.  Where possible
we'd prefer configure to determine such flags by itself, but if we can't
then at least we can document the special flags to help other users of
systems like yours.

Compiling For Multiple Architectures
====================================

When using GCC on platforms which support multiple architecture, the simplest
way to select a non-default architecture is to pass a CXX setting to configure
which includes the appropriate -m option - e.g. to build for x86 on x86-64
you would configure with:

./configure CXX='g++ -m32'

On Mac OS X 10.5 and later systems, you can create libraries and
executables that work on multiple system types--known as "fat" or
"universal" binaries--by specifying multiple '-arch' options to the
compiler but only a single '-arch' option to the preprocessor.  Like
this:

     ./configure CC="gcc -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
                 CXX="g++ -arch i386 -arch x86_64 -arch ppc -arch ppc64" \
                 CPP="gcc -E" CXXCPP="g++ -E"

Building in a separate directory
================================

If you wish to perform your build in a separate directory from the source,
create and change to the build directory, and run the configure script (in
the source directory) from the build directory, like so:

  mkdir BUILD
  cd BUILD
  ../configure

Installation Names
==================

   By default, 'make install' installs the package's commands under
'/usr/local/bin', include files under '/usr/local/include', etc.  You
can specify an installation prefix other than '/usr/local' by giving
'configure' the option '--prefix=PREFIX', where PREFIX must be an
absolute file name.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
pass the option '--exec-prefix=PREFIX' to 'configure', the package uses
PREFIX as the prefix for installing programs and libraries.
Documentation and other data files still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like '--bindir=DIR' to specify different values for particular
kinds of files.  Run 'configure --help' for a list of the directories
you can set and what kinds of files go in them.

Specifying the System Type
==========================

   There may be some features 'configure' cannot figure out
automatically, but needs to determine by the type of machine the package
will run on.  Usually, assuming the package is built to be run on the
_same_ architectures, 'configure' can figure that out, but if it prints
a message saying it cannot guess the machine type, give it the
'--build=TYPE' option.  TYPE can either be a short name for the system
type, such as 'sun4', or a canonical name which has the form:

     CPU-COMPANY-SYSTEM

where SYSTEM can have one of these forms:

     OS
     KERNEL-OS

   See the file 'config.sub' for the possible values of each field.  If
'config.sub' isn't included in this package, then this package doesn't
need to know the machine type.

   If you want to _use_ a cross compiler, that generates code for a
platform different from the build platform, you should specify the
"host" platform (i.e., that on which the generated programs will
eventually be run) with '--host=TYPE'.

Sharing Defaults
================

   If you want to set default values for 'configure' scripts to share,
you can create a site shell script called 'config.site' that gives
default values for variables like 'CXX', 'cache_file', and 'prefix'.
'configure' looks for 'PREFIX/share/config.site' if it exists, then
'PREFIX/etc/config.site' if it exists.  Or, you can set the
'CONFIG_SITE' environment variable to the location of the site script.
A warning: not all 'configure' scripts look for a site script.

Defining Variables
==================

   Variables not defined in a site shell script can be set in the
environment passed to 'configure'.  However, some packages may run
configure again during the build, and the customized values of these
variables may be lost.  In order to avoid this problem, you should set
them in the 'configure' command line, using 'VAR=value'.  For example:

     ./configure CXX=/usr/local2/bin/g++

causes the specified 'g++' to be used as the C++ compiler (unless it is
overridden in the site shell script).

'configure' Invocation
======================

   As well as the options documented in the "Quick Installation Guide",
'configure' recognizes the following standard options to control how it
operates:

'--help'
'-h'
     Print a summary of all of the options to 'configure', and exit.

'--version'
'-V'
     Print the version of Autoconf used to generate the 'configure'
     script, and exit.

'--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally 'config.cache'.  FILE defaults to '/dev/null' to
     disable caching.

'--config-cache'
'-C'
     Alias for '--cache-file=config.cache'.

'--quiet'
'--silent'
'-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to '/dev/null' (any error
     messages will still be shown).

'--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     'configure' can determine that directory automatically.

'configure' also accepts some other, not widely useful, options.  Run
'configure --help' for more details.
