# generate-perl-exceptions: generate error handling code for Perl bindings
my $copyright = <<'END';
 Copyright (C) 2003,2004,2006,2007,2008,2011,2012,2013 Olly Betts
 Copyright (C) 2007 Lemur Consulting Ltd
 Copyright (C) 2007 Richard Boulton

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; either version 2 of the
 License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
END

use strict;
use exception_data;

my @allclasses = (@baseclasses, @classes);

open FD, ">except.i" or die $!;

$copyright =~ s/^/ */mg;

print FD <<"EOF";
/** \@file perl/except.i
 * \@brief Custom Perl exception handling.
 */
/* Warning: This file is generated by $0
 * - do not modify directly!
 *
$copyright */

EOF

print FD <<'EOF';
namespace Xapian {

%exceptionclass Error;
EOF

for (@allclasses) {
    my ($class) = @{$_};
    print FD "%exceptionclass $class;\n";
}

print FD <<'EOF';
}
%include "xapian/error.h"

%{
namespace Xapian {
void handle_exception() {
    try {
	throw;
EOF

for (reverse @allclasses) {
    my ($class) = @{$_};
    print FD <<"EOF";
    } catch (const Xapian::$class &e) {
	void * p = (void *) new Xapian::$class(e);
#ifdef croak_sv
	SV * sv = sv_newmortal();
	sv_setref_pv(sv, "Xapian::$class", p);
	croak_sv(sv);
#elif defined ERRSV
	sv_setref_pv(ERRSV, "Xapian::$class", p);
	croak(Nullch);
#else
	sv_setref_pv(get_sv("@", TRUE), "Xapian::$class", p);
	croak(Nullch);
#endif
EOF
}

print FD <<'EOF';
    } catch (const std::exception& e) {
	croak("std::exception: %s", e.what());
    } catch (...) {
	croak("something terrible happened");
    }
}
}
%}

/* Functions and methods which are marked as "nothrow": */
EOF

chdir($INC[0]);
exception_data::for_each_nothrow(sub { print FD "%exception $_[0];\n" });

print FD <<'EOF';

%exception {
    try {
	$action
    } catch (...) {
	Xapian::handle_exception();
	SWIG_fail;
    }
}
EOF

close FD or die $!;
