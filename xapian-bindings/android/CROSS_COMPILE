Instructions for cross compiling for android 
============================================
This file is aimed to help developers get started with cross compiling xapian for android.


Prerequisites
=============
1)
You will need to download android ndk from https://developer.android.com/ndk/downloads/index.html 
for your respective development platform. Extract it and now using the make-standalone-toolchain.sh
in the ndk make a customized toolchain from the command line by doing the following:

export NDK=<path_to_ndk>
$NDK/build/tools/make-standalone-toolchain.sh --toolchain=<target-arch> --platform=<target-android-api> --install-dir=<path_to_ndk_standalone_toolchain>

<target-arch> is the architecture your standalone toolchain is going to target. eg. for ARM-based architecture can
use arm-linux-androideabi-4.9. For more info refer https://developer.android.com/ndk/guides/standalone_toolchain.html

<target-android-api> is the target Android platform/API level. eg android-16

<path_to_ndk_standalone_toolchain> is the path where your standalone toolchain will be installed.

2)
As Xapian makes use of built-in UUID APIs and ndk does not have UUID APIs, we need to explicitly cross compile that as well. So download libuuid, inside the e2fsprogs package by doing following:

git clone git://git.kernel.org/pub/scm/fs/ext2/e2fsprogs.git
cd e2fsprogs/

Now configure and install the library by doing:
export TOOLCHAIN=<path_to_ndk_standalone_toolchain>
export PATH=$PATH:$TOOLCHAIN/bin

./configure --host=<host> --prefix="$TOOLCHAIN/sysroot/usr" CFLAGS="-fPIC"
cd lib/uuid
make
make install

<host> is the target architecture. eg. arm-linux-androideabi
<target-arch> is the same as in step 1)

3)
For testing purpose you will need adb installed.

Cross compiling Xapian
======================
Now cross compile xapian for android as follows:

export TOOLCHAIN=<path_to_ndk_standalone_toolchain>
export PATH=$PATH:$TOOLCHAIN/bin
export OUTPUT_DIR=<path_to_xapian>/xapian-bindings/android/built
cd <path_to_xapian>/xapian-core
./configure --prefix=$OUTPUT_DIR --host=<host>  LDFLAGS="-fPIE -pie" --disable-shared --with-pic 
make
make install

The above configure will build xapian statically with position independent code.

Generating the bindings for android
===================================
Now generate the bindings for android as follows:

cd <path_to_xapian>/xapian-bindings/android
mkdir -p org/xapian
swig -Werror -I. -I../../xapian-core/include -c++ -java -module Xapian -package org.xapian -outdir org/xapian -o xapian_wrap.cc android.i

This should generate xapian_wrap.cc,xapian_wrap.h and .java files in org/xapian. Now add the following line in org/xapian/XapianJNI.java at start of static block at line no 1114:

System.loadLibrary("xapian_jni");

Save the file. Now generate the libxapian_jni.so by doing the following:

export CXX=$TOOLCHAIN/bin/<host>-g++
$CXX -c xapian_wrap.cc -I../../xapian-core/include
$CXX -shared -o built/lib/libxapian_jni.so -Wl,-whole-archive libxapian-x.x.a  -Wl,-no-whole-archive xapian_wrap.o -lz -luuid -lc

This will generate libxapian_jni.so in built/lib/libxapian_jni.so. Now compile all the .java class using :

javac -source 1.7 -target 1.7 -bootclasspath <path_to_jvm>/<your_jdk>/jre/lib/rt.jar org/xapian/*.java

<path_to_jvm> is the jvm installation path eg.usr/lib on Ubuntu
The 'source' and 'target' flags are required for android compactibility if you have java 1.8 or above. 


Now create a proper file structure for .aar for android by:

mkdir -p aar/jni/<proper_architecture> aar/res
jar -cf aar/classes.jar org/xapian/*.class
cp built/lib/libxapian_jni.so aar/jni/<proper_architecture>/
cd aar
jar -cf ../built/xapianlib.aar *

Now xapianlib.aar as a library contains libxapian_jni.so and jni bindings ready for use on android devices.

Testing Xapian on android
=========================
1)Now to test your cross compiled build(libxapian-x.x.a) do the following:

cd <path_to_xapian>/xapian-core/tests
make apitest

This will generate apitest file in tests folder. You will need to push apitest file, testdata folder and runtest script to your android device or emulator.

To push a file to your android device use the following command:

adb push <path_of_file> <dst_on_device>

<dst_on_device> is the destination where you have the read-write-execute permission. eg. /data/local/tmp

After pushing all the files to the device, you can run test as follows:

adb shell
cd <dst_on_device>
sh runtest ./apitest

2)Now to test your bindings, set the location of android sdk and android ndk in example/local.properties file and copy the xapianlib.aar in example/app/libs folder. To build the example and install the app on device or emulator run the following:

cd example
./gradlew build
./gradlew installDebug

It will install the .apk on the device or emulator. The app runs the SmokeTest and the results can be seen in the logs. The app also has SimpleIndex and SimpleSearch example.