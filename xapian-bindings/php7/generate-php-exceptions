# generate-php-exceptions: generate error handling code for PHP bindings
my $copyright = <<'END';
 Copyright 2006,2007,2010,2011,2012,2016 Olly Betts
 Copyright 2007 Lemur Consulting Ltd

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation; either version 2 of the
 License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
END

use strict;
use exception_data;

open FD, ">except.i" or die $!;

$copyright =~ s/^/ */mg;

print FD <<"EOF";
%{
/** \@file php/except.i
 * \@brief Custom PHP exception handling.
 */
/* Warning: This file is generated by $0
 * - do not modify directly!
 *
$copyright */

EOF

print FD <<'EOF';
#include <exception>
#include <zend_exceptions.h>

static void
XapianExceptionHandler()
{
    try {
	// Rethrow so we can look at the exception if it was a Xapian::Error.
	throw;
    } catch (const Xapian::Error &e) {
        // FIXME: It would be nicer to make the exceptions PHP classes
        // corresponding to the C++ Xapian::Error class hierarchy.
	zend_throw_exception(NULL, e.get_description().c_str(),
			     SWIG_UnknownError);
    } catch (const std::exception &e) {
	zend_throw_exception_ex(NULL, SWIG_UnknownError,
				"std::exception %s", e.what());
    } catch (...) {
	zend_throw_exception(NULL, "unknown error in Xapian",
			     SWIG_UnknownError);
    }
}
%}

/* Functions and methods which are marked as "nothrow": */
EOF

chdir($INC[0]);
exception_data::for_each_nothrow(sub { print FD "%exception $_[0];\n" });

print FD <<'EOF';

%exception {
    try {
	$function
    } catch (...) {
	XapianExceptionHandler();
	return;
    }
}
EOF

close FD or die $!;
